#!/usr/bin/env python3
import sys
import os
import subprocess
import shutil
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QPushButton,
    QListWidget, QMessageBox, QLabel, QFileDialog,
    QSystemTrayIcon, QMenu
)
from PyQt6.QtGui import QIcon, QPixmap, QPainter
from PyQt6.QtSvg import QSvgRenderer
from PyQt6.QtCore import Qt

CONFIG_DIR = os.path.expanduser("~/.awg")


def svg_icon(svg_data: str, size: int = 24) -> QIcon:
    """create QIcon from inline svg"""
    renderer = QSvgRenderer(bytearray(svg_data, encoding="utf-8"))
    pixmap = QPixmap(size, size)
    pixmap.fill(Qt.GlobalColor.transparent)
    painter = QPainter(pixmap)
    renderer.render(painter)
    painter.end()
    return QIcon(pixmap)


SVG_RED = """<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
<circle cx="12" cy="12" r="10" fill="red" stroke="black" stroke-width="1"/>
</svg>"""

SVG_GREEN = """<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
<circle cx="12" cy="12" r="10" fill="green" stroke="black" stroke-width="1"/>
</svg>"""

SVG_YELLOW = """<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
<circle cx="12" cy="12" r="10" fill="yellow" stroke="black" stroke-width="1"/>
</svg>"""


class AWGGui(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("awggui")
        self.setGeometry(200, 200, 400, 350)

        QApplication.setApplicationName("awggui")

        self.active_config = None  # currently active config path

        layout = QVBoxLayout()

        self.label = QLabel("select config:")
        layout.addWidget(self.label)

        self.config_list = QListWidget()
        layout.addWidget(self.config_list)

        self.btn_import = QPushButton("import config")
        self.btn_up = QPushButton("connect")
        self.btn_down = QPushButton("disconnect")
        layout.addWidget(self.btn_import)
        layout.addWidget(self.btn_up)
        layout.addWidget(self.btn_down)

        self.setLayout(layout)

        self.load_configs()

        # === tray ===
        self.icon_disconnected = svg_icon(SVG_RED)
        self.icon_connected = svg_icon(SVG_GREEN)
        self.icon_connecting = svg_icon(SVG_YELLOW)

        self.tray = QSystemTrayIcon(self.icon_disconnected, self)
        self.tray_menu = QMenu()

        self.action_connect = self.tray_menu.addAction("connect")
        self.action_disconnect = self.tray_menu.addAction("disconnect")
        self.tray_menu.addSeparator()
        self.action_quit = self.tray_menu.addAction("quit")

        self.tray.setContextMenu(self.tray_menu)
        self.tray.show()

        # tray signals
        self.action_connect.triggered.connect(self.connect_vpn)
        self.action_disconnect.triggered.connect(self.disconnect_vpn)
        self.action_quit.triggered.connect(self.exit_app)

        # button signals
        self.btn_import.clicked.connect(self.import_config)
        self.btn_up.clicked.connect(self.connect_vpn)
        self.btn_down.clicked.connect(self.disconnect_vpn)

        # initial state
        self.update_buttons(disconnected=True)

    def load_configs(self):
        if not os.path.exists(CONFIG_DIR):
            os.makedirs(CONFIG_DIR)
        self.config_list.clear()
        for f in sorted(os.listdir(CONFIG_DIR)):
            if f.endswith(".conf"):
                self.config_list.addItem(f)

    def update_buttons(self, connected=False, disconnected=False):
        """manage button and tray menu states"""
        if connected:
            self.btn_up.setEnabled(False)
            self.btn_down.setEnabled(True)
            self.action_connect.setEnabled(False)
            self.action_disconnect.setEnabled(True)
            self.tray.setIcon(self.icon_connected)
        elif disconnected:
            self.btn_up.setEnabled(True)
            self.btn_down.setEnabled(False)
            self.action_connect.setEnabled(True)
            self.action_disconnect.setEnabled(False)
            self.tray.setIcon(self.icon_disconnected)

    def import_config(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self, "select awg config", "", "config files (*.conf)"
        )
        if file_path:
            try:
                dest = os.path.join(CONFIG_DIR, os.path.basename(file_path))
                shutil.copy(file_path, dest)
                self.load_configs()
                QMessageBox.information(self, "import", f"config {os.path.basename(file_path)} imported")
            except Exception as e:
                QMessageBox.critical(self, "error", f"failed to import config:\n{e}")

    def connect_vpn(self):
        item = self.config_list.currentItem()
        if not item:
            QMessageBox.warning(self, "warning", "select a config first")
            return
        config = os.path.join(CONFIG_DIR, item.text())
        try:
            # show yellow icon while connecting
            self.tray.setIcon(self.icon_connecting)
            QApplication.processEvents()

            subprocess.run(["awg-quick", "up", config], check=True)
            self.active_config = config
            self.tray.showMessage("awggui", f"connected: {item.text()}", QSystemTrayIcon.MessageIcon.Information)
            self.update_buttons(connected=True)
        except subprocess.CalledProcessError as e:
            QMessageBox.critical(self, "error", f"failed to connect:\n{e}")
            self.update_buttons(disconnected=True)

    def disconnect_vpn(self):
        if not self.active_config:
            return
        try:
            subprocess.run(["awg-quick", "down", self.active_config], check=True)
            self.tray.showMessage("awggui", f"disconnected: {os.path.basename(self.active_config)}", QSystemTrayIcon.MessageIcon.Information)
        except subprocess.CalledProcessError as e:
            QMessageBox.critical(self, "error", f"failed to disconnect:\n{e}")
        finally:
            self.active_config = None
            self.update_buttons(disconnected=True)

    def closeEvent(self, event):
        """on window close: minimize to tray (do not quit)"""
        event.ignore()
        self.hide()
        self.tray.showMessage("awggui", "application minimized to tray", QSystemTrayIcon.MessageIcon.Information)

    def exit_app(self):
        """quit application (disconnect active config first)"""
        if self.active_config:
            try:
                subprocess.run(["awg-quick", "down", self.active_config], check=True)
            except Exception:
                pass
        QApplication.quit()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    gui = AWGGui()
    gui.show()
    sys.exit(app.exec())
